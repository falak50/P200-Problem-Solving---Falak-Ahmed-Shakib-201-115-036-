#include<bits/stdc++.h>
using namespace std;
typedef long long  ll;
typedef pair<ll,ll> pll;
#define fastread() (ios_base:: sync_with_stdio(false),cin.tie(NULL))
#define fi first
#define se second
#define pb push_back
ll const MOD=1000000007;
const int M= 2e5 + 10;
///-------------------------------------------------------------------------------------------------///
///                KARMA IS LIKE 69,,, YOU GET WHAT YOU GIVE                                        ///
///-------------------------------------------------------------------------------------------------///
#define eb emplace_back
ll ara[M+10];
ll tree[M*3];
void init(ll node,ll b,ll e)
{
 
   if(b==e)
   {
       tree[node]=ara[b];
       return ;
   }
 
   ll l=node*2;
   ll r=l+1;
   ll mid=(b+e)/2;
 
     init(l,b,mid);
     init(r,mid+1,e);
 
  tree[node]=tree[l]+tree[r];
 
}
ll query(ll node,ll b,ll e,ll i,ll j)
{
   if(i>e || j<b)
   {
       return 0;
   }
 
   if(i<=b && j>=e)
   {
       return tree[node];
   }
 
 ll  l=node*2;
 ll  r=l+1;
 ll mid=(b+e)/2;
 
 ll p1=query(l,b,mid,i,j);
 ll p2=query(r,mid+1,e,i,j);
 
 
 return p1+p2;
 
}
void update(ll node,ll b,ll e,ll i,ll newv)
{
 if(i>e || i<b)
   {
       return ;
   }
 
   if(i==b && i==e)
   {
    tree[node]=newv;
    return;
   }
 
 ll  l=node*2;
 ll  r=l+1;
 ll mid=(b+e)/2;
 
 update(l,b,mid,i,newv);
 update(r,mid+1,e,i,newv);
 
 tree[node]=tree[l]+tree[r];
 
}
 
int main()
{
    ll n,q;
    cin>>n>>q;
    for(ll i=1;i<=n;i++)cin>>ara[i];
 
    init(1,1,n);
 
 
    while(q--)
    {
 
        ll a;
        cin>>a;
 
        if(a==2)
        {
            ll b,e;
            cin>>b>>e;
 
           cout<<query(1,1,n,b,e)<<endl;
        }else {
            ll p,newv;
 
            cin>>p>>newv;
 
          update(1,1,n,p,newv);
 
 
}
 
 
    }
 
 
 
 
}
